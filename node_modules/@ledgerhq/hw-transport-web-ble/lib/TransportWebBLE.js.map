{"version":3,"sources":["../src/TransportWebBLE.js"],"names":["deviceOrId","needsReconnect","device","transportsCache","bluetooth","requiresBluetooth","requestDevice","requestDeviceParam","gatt","connected","connect","retrieveService","service","infos","deviceModel","writeUuid","notifyUuid","Promise","all","getCharacteristic","writeC","notifyC","notifyObservable","pipe","value","toString","notif","subscribe","transport","BluetoothTransport","id","onDisconnect","console","log","e","notYetDisconnected","unsubscribe","removeEventListener","emit","addEventListener","beforeMTUTime","Date","now","inferMTU","afterMTUTime","disconnect","setTimeout","s","open","navigator","Error","availability","create","onAvailabilityChanged","observer","next","unsubscribed","getAvailability","then","available","filters","map","services","uuid","getPrimaryServices","type","descriptor","complete","error","message","writeCharacteristic","mtuSize","exchange","apdu","exchangeAtomicImpl","msgIn","write","toPromise","data","msgOut","String","buffer","writeValue","mtu","readUInt8","Buffer","from","exchangeBusyPromise","isSupported","resolve","observeAvailability","list"],"mappings":"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","file":"TransportWebBLE.js","sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport Transport from \"@ledgerhq/hw-transport\";\nimport {\n  DisconnectedDevice,\n  TransportOpenUserCancelled\n} from \"@ledgerhq/errors\";\nimport {\n  getBluetoothServiceUuids,\n  getInfosForServiceUuid\n} from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport { sendAPDU } from \"@ledgerhq/devices/lib/ble/sendAPDU\";\nimport { receiveAPDU } from \"@ledgerhq/devices/lib/ble/receiveAPDU\";\nimport { log } from \"@ledgerhq/logs\";\nimport { Observable, defer, merge, from } from \"rxjs\";\nimport { share, ignoreElements, first, map, tap } from \"rxjs/operators\";\nimport type { Device, Characteristic } from \"./types\";\nimport { monitorCharacteristic } from \"./monitorCharacteristic\";\n\nconst requiresBluetooth = () => {\n  // $FlowFixMe\n  const { bluetooth } = navigator;\n  if (typeof bluetooth === \"undefined\") {\n    throw new Error(\"web bluetooth not supported\");\n  }\n  return bluetooth;\n};\n\nconst availability = (): Observable<boolean> =>\n  Observable.create(observer => {\n    const bluetooth = requiresBluetooth();\n    const onAvailabilityChanged = e => {\n      observer.next(e.value);\n    };\n    bluetooth.addEventListener(\"availabilitychanged\", onAvailabilityChanged);\n    let unsubscribed = false;\n    bluetooth.getAvailability().then(available => {\n      if (!unsubscribed) {\n        observer.next(available);\n      }\n    });\n    return () => {\n      unsubscribed = true;\n      bluetooth.removeEventListener(\n        \"availabilitychanged\",\n        onAvailabilityChanged\n      );\n    };\n  });\n\nconst transportsCache = {};\n\nconst requestDeviceParam = () => ({\n  filters: getBluetoothServiceUuids().map(uuid => ({\n    services: [uuid]\n  }))\n});\n\nconst retrieveService = async device => {\n  if (!device.gatt) throw new Error(\"bluetooth gatt not found\");\n  const [service] = await device.gatt.getPrimaryServices();\n  if (!service) throw new Error(\"bluetooth service not found\");\n  const infos = getInfosForServiceUuid(service.uuid);\n  if (!infos) throw new Error(\"bluetooth service infos not found\");\n  return [service, infos];\n};\n\nasync function open(deviceOrId: Device | string, needsReconnect: boolean) {\n  let device;\n  if (typeof deviceOrId === \"string\") {\n    if (transportsCache[deviceOrId]) {\n      log(\"ble-verbose\", \"Transport in cache, using that.\");\n      return transportsCache[deviceOrId];\n    }\n\n    const bluetooth = requiresBluetooth();\n\n    // TODO instead we should \"query\" the device by its ID\n    device = await bluetooth.requestDevice(requestDeviceParam());\n  } else {\n    device = deviceOrId;\n  }\n\n  if (!device.gatt.connected) {\n    log(\"ble-verbose\", \"not connected. connecting...\");\n    await device.gatt.connect();\n  }\n\n  const [service, infos] = await retrieveService(device);\n  const { deviceModel, writeUuid, notifyUuid } = infos;\n  const [writeC, notifyC] = await Promise.all([\n    service.getCharacteristic(writeUuid),\n    service.getCharacteristic(notifyUuid)\n  ]);\n\n  const notifyObservable = monitorCharacteristic(notifyC).pipe(\n    tap(value => {\n      log(\"ble-frame\", \"<= \" + value.toString(\"hex\"));\n    }),\n    share()\n  );\n\n  const notif = notifyObservable.subscribe();\n\n  const transport = new BluetoothTransport(\n    device,\n    writeC,\n    notifyObservable,\n    deviceModel\n  );\n\n  if (!device.gatt.connected) {\n    throw new DisconnectedDevice();\n  }\n\n  // eslint-disable-next-line require-atomic-updates\n  transportsCache[transport.id] = transport;\n  const onDisconnect = e => {\n    console.log(\"onDisconnect!\", e);\n    delete transportsCache[transport.id];\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    device.removeEventListener(\"gattserverdisconnected\", onDisconnect);\n    log(\"ble-verbose\", `BleTransport(${transport.id}) disconnected`);\n    transport.emit(\"disconnect\", e);\n  };\n  device.addEventListener(\"gattserverdisconnected\", onDisconnect);\n\n  let beforeMTUTime = Date.now();\n  try {\n    await transport.inferMTU();\n  } finally {\n    let afterMTUTime = Date.now();\n\n    // workaround for #279: we need to open() again if we come the first time here,\n    // to make sure we do a disconnect() after the first pairing time\n    // because of a firmware bug\n\n    if (afterMTUTime - beforeMTUTime < 1000) {\n      needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.\n    }\n\n    if (needsReconnect) {\n      await device.gatt.disconnect();\n      // necessary time for the bonding workaround\n      await new Promise(s => setTimeout(s, 4000));\n    }\n  }\n\n  if (needsReconnect) {\n    return open(device, false);\n  }\n\n  return transport;\n}\n\n/**\n * react-native bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/hw-transport-web-ble\";\n */\nexport default class BluetoothTransport extends Transport<Device | string> {\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve()\n      .then(requiresBluetooth)\n      .then(() => true, () => false);\n\n  /**\n   * observe event with { available: bool, type: string }\n   * (available is generic, type is specific)\n   * an event is emit once and then each time it changes\n   */\n  static observeAvailability = (observer: *) =>\n    availability.subscribe(observer);\n\n  static list = (): * => Promise.resolve([]);\n\n  /**\n   * Scan for Ledger Bluetooth devices.\n   * On this web implementation, it only emits ONE device, the one that was selected in the UI (if any).\n   */\n  static listen(observer: *) {\n    log(\"ble-verbose\", \"listen...\");\n    let unsubscribed;\n\n    const bluetooth = requiresBluetooth();\n\n    bluetooth.requestDevice(requestDeviceParam()).then(\n      async device => {\n        if (!unsubscribed) {\n          observer.next({\n            type: \"add\",\n            descriptor: device\n          });\n          observer.complete();\n        }\n      },\n      error => {\n        observer.error(new TransportOpenUserCancelled(error.message));\n      }\n    );\n    function unsubscribe() {\n      unsubscribed = true;\n    }\n    return { unsubscribe };\n  }\n\n  /**\n   * open a bluetooth device.\n   */\n  static async open(deviceOrId: Device | string) {\n    return open(deviceOrId, true);\n  }\n\n  /**\n   * globally disconnect a bluetooth device by its id.\n   */\n  static disconnect = async (id: *) => {\n    log(\"ble-verbose\", `user disconnect(${id})`);\n    const transport = transportsCache[id];\n    if (transport) {\n      transport.device.gatt.disconnect();\n    }\n  };\n\n  id: string;\n\n  device: Device;\n\n  mtuSize: number = 20;\n\n  writeCharacteristic: Characteristic;\n\n  notifyObservable: Observable<Buffer>;\n\n  notYetDisconnected = true;\n\n  deviceModel: DeviceModel;\n\n  constructor(\n    device: Device,\n    writeCharacteristic: Characteristic,\n    notifyObservable: Observable<*>,\n    deviceModel: DeviceModel\n  ) {\n    super();\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n\n    log(\"ble-verbose\", `BleTransport(${String(this.id)}) new instance`);\n  }\n\n  async inferMTU() {\n    let mtu = 23;\n\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu =\n          (await merge(\n            this.notifyObservable.pipe(\n              first(buffer => buffer.readUInt8(0) === 0x08),\n              map(buffer => buffer.readUInt8(5))\n            ),\n            defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(\n              ignoreElements()\n            )\n          ).toPromise()) + 3;\n      } catch (e) {\n        log(\"ble-error\", \"inferMTU got \" + String(e));\n        this.device.gatt.disconnect();\n        throw e;\n      }\n    });\n\n    if (mtu > 23) {\n      const mtuSize = mtu - 3;\n      log(\n        \"ble-verbose\",\n        `BleTransport(${String(this.id)}) mtu set to ${String(mtuSize)}`\n      );\n      this.mtuSize = mtuSize;\n    }\n\n    return this.mtuSize;\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      try {\n        const msgIn = apdu.toString(\"hex\");\n        log(\"apdu\", `=> ${msgIn}`);\n\n        const data = await merge(\n          this.notifyObservable.pipe(receiveAPDU),\n          sendAPDU(this.write, apdu, this.mtuSize)\n        ).toPromise();\n\n        const msgOut = data.toString(\"hex\");\n        log(\"apdu\", `<= ${msgOut}`);\n\n        return data;\n      } catch (e) {\n        log(\"ble-error\", \"exchange got \" + String(e));\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          this.device.gatt.disconnect();\n        }\n        throw e;\n      }\n    });\n\n  setScrambleKey() {}\n\n  write = async (buffer: Buffer) => {\n    log(\"ble-frame\", \"=> \" + buffer.toString(\"hex\"));\n    await this.writeCharacteristic.writeValue(buffer);\n  };\n\n  async close() {\n    if (this.exchangeBusyPromise) {\n      await this.exchangeBusyPromise;\n    }\n  }\n}\n"]}